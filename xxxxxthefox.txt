local Aimbot_Library = {}

-- إعدادات المكتبة
Aimbot_Library.Settings = {
    Aimbot_Enabled = false,
    MaxCheckDistance = 20000,
    DetectionPrecision = 0.1,
    PredictionFactor = 0.1,
    FOV = 60,  -- تعديل قيمة FOV هنا مباشرة
    Smoothness = 0.2,
    Protection = true,
}

-- خدمات اللعبة
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local camera = Workspace.CurrentCamera

-- وظائف المساعدة
function Aimbot_Library.IsEnemy(player)
    return player.Team == nil or localPlayer.Team == nil or player.Team ~= localPlayer.Team
end

function Aimbot_Library.IsAlive(player)
    return player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end

-- فحص الجدران
function Aimbot_Library.IsPartVisible(part)
    local origin = camera.CFrame.Position
    local direction = (part.Position - origin).Unit
    local distance = (part.Position - origin).Magnitude

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {localPlayer.Character, part.Parent}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.IgnoreWater = true

    local raycastResult = Workspace:Raycast(origin, direction * distance, raycastParams)
    return raycastResult == nil -- إذا لم يتم العثور على أي شيء في المسار
end

function Aimbot_Library.IsWithinFov(targetPosition)
    local direction = (targetPosition - camera.CFrame.Position).Unit
    local lookVector = camera.CFrame.LookVector
    local dotProduct = direction:Dot(lookVector)

    local fovCosine = math.cos(math.rad(Aimbot_Library.Settings.FOV / 2))
    return dotProduct >= fovCosine
end

function Aimbot_Library.GetClosestEnemy()
    local bestHitbox = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and Aimbot_Library.IsEnemy(player) and Aimbot_Library.IsAlive(player) then
            local head = player.Character:FindFirstChild("Head")
            if head and Aimbot_Library.IsWithinFov(head.Position) and Aimbot_Library.IsPartVisible(head) then
                local distance = (head.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance and distance <= Aimbot_Library.Settings.MaxCheckDistance then
                    closestDistance = distance
                    bestHitbox = head
                end
            end
        end
    end

    return bestHitbox, closestDistance
end

function Aimbot_Library.PredictMovement(hitbox)
    local velocity = hitbox.AssemblyLinearVelocity
    return hitbox.Position + (velocity * Aimbot_Library.Settings.PredictionFactor)
end

-- دالة لتطبيق السلاسة في التصويب
function Aimbot_Library.SmoothAim(currentPosition, targetPosition, smoothness)
    local direction = (targetPosition - currentPosition).unit
    local smoothPosition = currentPosition + direction * smoothness
    return smoothPosition
end

-- تشغيل Aimbot
RunService.RenderStepped:Connect(function(deltaTime)
    if Aimbot_Library.Settings.Aimbot_Enabled then
        local targetHitbox, _ = Aimbot_Library.GetClosestEnemy()
        if targetHitbox then
            local targetPosition = Aimbot_Library.PredictMovement(targetHitbox)
            -- لا حاجة لواجهة المستخدم هنا لأننا نتعامل مع الإعدادات فقط
        end
    end
end)

-- تغيير حالة التفعيل
local function ToggleAimbot()
    Aimbot_Library.Settings.Aimbot_Enabled = not Aimbot_Library.Settings.Aimbot_Enabled
    -- هنا سيتم تفعيل أو تعطيل الأيمبوت حسب الحالة
end
